{
  "version": 3,
  "sources": ["../../vuetify/src/components/VBanner/VBanner.tsx", "../../vuetify/src/components/VBanner/VBannerActions.tsx", "../../vuetify/src/components/VBanner/VBannerText.ts"],
  "sourcesContent": ["// Styles\nimport './VBanner.sass'\n\n// Components\nimport { VAvatar } from '@/components/VAvatar'\nimport { VBannerActions } from './VBannerActions'\nimport { VBannerText } from './VBannerText'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeLocationProps, useLocation } from '@/composables/location'\nimport { makePositionProps, usePosition } from '@/composables/position'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useDisplay } from '@/composables/display'\nimport { IconValue } from '@/composables/icons'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\nimport { toRef } from 'vue'\n\n// Types\nimport type { MakeSlots } from '@/util'\nimport type { PropType } from 'vue'\n\nexport type VBannerSlots = MakeSlots<{\n  default: []\n  prepend: []\n  text: []\n  actions: []\n}>\n\nexport const VBanner = genericComponent<VBannerSlots>()({\n  name: 'VBanner',\n\n  props: {\n    avatar: String,\n    color: String,\n    icon: IconValue,\n    lines: String as PropType<'one' | 'two' | 'three'>,\n    stacked: Boolean,\n    sticky: Boolean,\n    text: String,\n\n    ...makeBorderProps(),\n    ...makeDensityProps(),\n    ...makeDimensionProps(),\n    ...makeElevationProps(),\n    ...makeLocationProps(),\n    ...makePositionProps(),\n    ...makeRoundedProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  setup (props, { slots }) {\n    const { borderClasses } = useBorder(props)\n    const { densityClasses } = useDensity(props)\n    const { mobile } = useDisplay()\n    const { dimensionStyles } = useDimension(props)\n    const { elevationClasses } = useElevation(props)\n    const { locationStyles } = useLocation(props)\n    const { positionClasses } = usePosition(props)\n    const { roundedClasses } = useRounded(props)\n\n    const { themeClasses } = provideTheme(props)\n\n    const color = toRef(props, 'color')\n    const density = toRef(props, 'density')\n\n    provideDefaults({ VBannerActions: { color, density } })\n\n    useRender(() => {\n      const hasText = !!(props.text || slots.text)\n      const hasPrepend = !!(slots.prepend || props.avatar || props.icon)\n\n      return (\n        <props.tag\n          class={[\n            'v-banner',\n            {\n              'v-banner--stacked': props.stacked || mobile.value,\n              'v-banner--sticky': props.sticky,\n              [`v-banner--${props.lines}-line`]: !!props.lines,\n            },\n            borderClasses.value,\n            densityClasses.value,\n            elevationClasses.value,\n            positionClasses.value,\n            roundedClasses.value,\n            themeClasses.value,\n          ]}\n          style={[\n            dimensionStyles.value,\n            locationStyles.value,\n          ]}\n          role=\"banner\"\n        >\n          { hasPrepend && (\n            <VDefaultsProvider\n              key=\"prepend\"\n              defaults={{\n                VAvatar: {\n                  color: color.value,\n                  density: density.value,\n                  icon: props.icon,\n                  image: props.avatar,\n                },\n              }}\n            >\n              <div class=\"v-banner__prepend\">\n                { slots.prepend\n                  ? slots.prepend()\n                  : (props.avatar || props.icon) && (<VAvatar />)\n                }\n              </div>\n            </VDefaultsProvider>\n          ) }\n\n          <div class=\"v-banner__content\">\n            { hasText && (\n              <VBannerText key=\"text\">\n                { slots.text ? slots.text() : props.text }\n              </VBannerText>\n            ) }\n\n            { slots.default?.() }\n          </div>\n\n          { slots.actions && (\n            <VBannerActions>\n              { slots.actions() }\n            </VBannerActions>\n          ) }\n        </props.tag>\n      )\n    })\n  },\n})\n\nexport type VBanner = InstanceType<typeof VBanner>\n", "// Composables\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utility\nimport { genericComponent, useRender } from '@/util'\n\nexport const VBannerActions = genericComponent()({\n  name: 'VBannerActions',\n\n  props: {\n    color: String,\n    density: String,\n  },\n\n  setup (props, { slots }) {\n    provideDefaults({\n      VBtn: {\n        color: props.color,\n        density: props.density,\n        variant: 'text',\n      },\n    })\n\n    useRender(() => (\n      <div class=\"v-banner-actions\">\n        { slots.default?.() }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VBannerActions = InstanceType<typeof VBannerActions>\n", "import { createSimpleFunctional } from '@/util'\n\nexport const VBannerText = createSimpleFunctional('v-banner-text')\n\nexport type VBannerText = InstanceType<typeof VBannerText>\n"],
  "mappings": "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",
  "names": ["VBannerActions", "genericComponent", "name", "props", "color", "String", "density", "setup", "slots", "provideDefaults", "VBtn", "variant", "useRender", "default", "VBannerText", "createSimpleFunctional", "VBanner", "genericComponent", "name", "props", "avatar", "String", "color", "icon", "IconValue", "lines", "stacked", "Boolean", "sticky", "text", "makeBorderProps", "makeDensityProps", "makeDimensionProps", "makeElevationProps", "makeLocationProps", "makePositionProps", "makeRoundedProps", "makeTagProps", "makeThemeProps", "setup", "slots", "borderClasses", "useBorder", "densityClasses", "useDensity", "mobile", "useDisplay", "dimensionStyles", "useDimension", "elevationClasses", "useElevation", "locationStyles", "useLocation", "positionClasses", "usePosition", "roundedClasses", "useRounded", "themeClasses", "provideTheme", "toRef", "density", "provideDefaults", "VBannerActions", "useRender", "hasText", "hasPrepend", "prepend", "value", "VAvatar", "image", "default", "actions"]
}
