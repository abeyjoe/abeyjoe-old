{
  "version": 3,
  "sources": ["../../vuetify/src/components/VTimeline/VTimeline.tsx", "../../vuetify/src/components/VTimeline/VTimelineDivider.tsx", "../../vuetify/src/components/VTimeline/VTimelineItem.tsx"],
  "sourcesContent": ["// Styles\nimport './VTimeline.sass'\n\n// Composables\nimport { makeDensityProps, useDensity } from '@/composables/density'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { provideDefaults } from '@/composables/defaults'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { convertToUnit, genericComponent, useRender } from '@/util'\n\n// Types\nimport type { Prop } from 'vue'\n\nexport type TimelineDirection = 'vertical' | 'horizontal'\nexport type TimelineSide = 'start' | 'end' | undefined\nexport type TimelineAlign = 'center' | 'start'\nexport type TimelineTruncateLine = 'start' | 'end' | 'both' | undefined\n\nexport const VTimeline = genericComponent()({\n  name: 'VTimeline',\n\n  props: {\n    align: {\n      type: String,\n      default: 'center',\n      validator: (v: any) => ['center', 'start'].includes(v),\n    } as Prop<TimelineAlign>,\n    direction: {\n      type: String,\n      default: 'vertical',\n      validator: (v: any) => ['vertical', 'horizontal'].includes(v),\n    } as Prop<TimelineDirection>,\n    justify: {\n      type: String,\n      default: 'auto',\n      validator: (v: any) => ['auto', 'center'].includes(v),\n    },\n    side: {\n      type: String,\n      validator: (v: any) => v == null || ['start', 'end'].includes(v),\n    } as Prop<TimelineSide>,\n    lineInset: {\n      type: [String, Number],\n      default: 0,\n    },\n    lineThickness: {\n      type: [String, Number],\n      default: 2,\n    },\n    lineColor: String,\n    truncateLine: {\n      type: String,\n      validator: (v: any) => ['start', 'end', 'both'].includes(v),\n    } as Prop<TimelineTruncateLine>,\n\n    ...makeDensityProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  setup (props, { slots }) {\n    const { themeClasses } = provideTheme(props)\n    const { densityClasses } = useDensity(props)\n\n    provideDefaults({\n      VTimelineDivider: {\n        lineColor: toRef(props, 'lineColor'),\n      },\n      VTimelineItem: {\n        density: toRef(props, 'density'),\n        lineInset: toRef(props, 'lineInset'),\n      },\n    })\n\n    const sideClasses = computed(() => {\n      const side = props.side ? props.side : props.density !== 'default' ? 'end' : null\n\n      return side && `v-timeline--side-${side}`\n    })\n\n    const truncateClasses = computed(() => {\n      const classes = [\n        'v-timeline--truncate-line-start',\n        'v-timeline--truncate-line-end',\n      ]\n\n      switch (props.truncateLine) {\n        case 'both': return classes\n        case 'start': return classes[0]\n        case 'end': return classes[1]\n        default: return null\n      }\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-timeline',\n          `v-timeline--${props.direction}`,\n          `v-timeline--align-${props.align}`,\n          `v-timeline--justify-${props.justify}`,\n          truncateClasses.value,\n          {\n            'v-timeline--inset-line': !!props.lineInset,\n          },\n          themeClasses.value,\n          densityClasses.value,\n          sideClasses.value,\n        ]}\n        style={{\n          '--v-timeline-line-thickness': convertToUnit(props.lineThickness),\n        }}\n        v-slots={ slots }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VTimeline = InstanceType<typeof VTimeline>\n", "// Components\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { provideDefaults } from '@/composables/defaults'\nimport { useBackgroundColor } from '@/composables/color'\n\n// Utilities\nimport { genericComponent, useRender } from '@/util'\nimport { toRef } from 'vue'\n\nexport const VTimelineDivider = genericComponent()({\n  name: 'VTimelineDivider',\n\n  props: {\n    dotColor: String,\n    fillDot: Boolean,\n    hideDot: Boolean,\n    icon: IconValue,\n    iconColor: String,\n    lineColor: String,\n\n    ...makeRoundedProps(),\n    ...makeSizeProps(),\n    ...makeElevationProps(),\n  },\n\n  setup (props, { slots }) {\n    const { sizeClasses, sizeStyles } = useSize(props, 'v-timeline-divider__dot')\n    const { backgroundColorStyles, backgroundColorClasses } = useBackgroundColor(toRef(props, 'dotColor'))\n    const { roundedClasses } = useRounded(props, 'v-timeline-divider__dot')\n    const { elevationClasses } = useElevation(props)\n    const {\n      backgroundColorClasses: lineColorClasses,\n      backgroundColorStyles: lineColorStyles,\n    } = useBackgroundColor(toRef(props, 'lineColor'))\n\n    provideDefaults({\n      VIcon: {\n        color: toRef(props, 'iconColor'),\n        icon: toRef(props, 'icon'),\n        size: toRef(props, 'size'),\n      },\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-timeline-divider',\n          {\n            'v-timeline-divider--fill-dot': props.fillDot,\n          },\n        ]}\n      >\n        <div\n          class={[\n            'v-timeline-divider__before',\n            lineColorClasses.value,\n          ]}\n          style={ lineColorStyles.value }\n        />\n\n        { !props.hideDot && (\n          <div\n            key=\"dot\"\n            class={[\n              'v-timeline-divider__dot',\n              elevationClasses.value,\n              roundedClasses.value,\n              sizeClasses.value,\n            ]}\n            style={ sizeStyles.value }\n          >\n            <div\n              class={[\n                'v-timeline-divider__inner-dot',\n                backgroundColorClasses.value,\n                roundedClasses.value,\n              ]}\n              style={ backgroundColorStyles.value }\n            >\n              { slots.default?.() ?? (props.icon ? (<VIcon />) : undefined) }\n            </div>\n          </div>\n        ) }\n\n        <div\n          class={[\n            'v-timeline-divider__after',\n            lineColorClasses.value,\n          ]}\n          style={ lineColorStyles.value }\n        />\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VTimelineDivider = InstanceType<typeof VTimelineDivider>\n", "// Components\nimport { VTimelineDivider } from './VTimelineDivider'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeElevationProps } from '@/composables/elevation'\nimport { makeRoundedProps } from '@/composables/rounded'\nimport { makeSizeProps } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { convertToUnit, genericComponent, useRender } from '@/util'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { ref, watch } from 'vue'\n\n// Types\nimport type { PropType } from 'vue'\n\n// Types\nexport type VTimelineItemSlots = {\n  default: []\n  icon: []\n  opposite: []\n}\n\nexport const VTimelineItem = genericComponent<VTimelineItemSlots>()({\n  name: 'VTimelineItem',\n\n  props: {\n    density: String as PropType<'default' | 'compact'>,\n    dotColor: String,\n    fillDot: Boolean,\n    hideDot: Boolean,\n    hideOpposite: {\n      type: Boolean,\n      default: undefined,\n    },\n    icon: IconValue,\n    iconColor: String,\n    lineInset: [Number, String],\n\n    ...makeRoundedProps(),\n    ...makeElevationProps(),\n    ...makeSizeProps(),\n    ...makeTagProps(),\n    ...makeDimensionProps(),\n  },\n\n  setup (props, { slots }) {\n    const { dimensionStyles } = useDimension(props)\n\n    const dotSize = ref(0)\n    const dotRef = ref<VTimelineDivider>()\n    watch(dotRef, newValue => {\n      if (!newValue) return\n      dotSize.value = newValue.$el.querySelector('.v-timeline-divider__dot')?.getBoundingClientRect().width ?? 0\n    }, {\n      flush: 'post',\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-timeline-item',\n          {\n            'v-timeline-item--fill-dot': props.fillDot,\n          },\n        ]}\n        style={{\n          '--v-timeline-dot-size': convertToUnit(dotSize.value),\n          '--v-timeline-line-inset': props.lineInset ? `calc(var(--v-timeline-dot-size) / 2 + ${convertToUnit(props.lineInset)})` : convertToUnit(0),\n        }}\n      >\n        <div\n          class=\"v-timeline-item__body\"\n          style={ dimensionStyles.value }\n        >\n          { slots.default?.() }\n        </div>\n\n        <VTimelineDivider\n          ref={ dotRef }\n          hideDot={ props.hideDot }\n          icon={ props.icon }\n          iconColor={ props.iconColor }\n          size={ props.size }\n          elevation={ props.elevation }\n          dotColor={ props.dotColor }\n          fillDot={ props.fillDot }\n          rounded={ props.rounded }\n          v-slots={{ default: slots.icon }}\n        />\n\n        { props.density !== 'compact' && (\n          <div class=\"v-timeline-item__opposite\">\n            { !props.hideOpposite && slots.opposite?.() }\n          </div>\n        ) }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VTimelineItem = InstanceType<typeof VTimelineItem>\n"],
  "mappings": "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",
  "names": ["VTimeline", "genericComponent", "name", "props", "align", "type", "String", "default", "validator", "v", "includes", "direction", "justify", "side", "lineInset", "Number", "lineThickness", "lineColor", "truncateLine", "makeDensityProps", "makeTagProps", "makeThemeProps", "setup", "slots", "themeClasses", "provideTheme", "densityClasses", "useDensity", "provideDefaults", "VTimelineDivider", "toRef", "VTimelineItem", "density", "sideClasses", "computed", "truncateClasses", "classes", "useRender", "value", "convertToUnit", "VTimelineDivider", "genericComponent", "name", "props", "dotColor", "String", "fillDot", "Boolean", "hideDot", "icon", "IconValue", "iconColor", "lineColor", "makeRoundedProps", "makeSizeProps", "makeElevationProps", "setup", "slots", "sizeClasses", "sizeStyles", "useSize", "backgroundColorStyles", "backgroundColorClasses", "useBackgroundColor", "toRef", "roundedClasses", "useRounded", "elevationClasses", "useElevation", "lineColorClasses", "lineColorStyles", "provideDefaults", "VIcon", "color", "size", "useRender", "value", "default", "undefined", "VTimelineItem", "genericComponent", "name", "props", "density", "String", "dotColor", "fillDot", "Boolean", "hideDot", "hideOpposite", "type", "default", "undefined", "icon", "IconValue", "iconColor", "lineInset", "Number", "makeRoundedProps", "makeElevationProps", "makeSizeProps", "makeTagProps", "makeDimensionProps", "setup", "slots", "dimensionStyles", "useDimension", "dotSize", "ref", "dotRef", "watch", "newValue", "value", "$el", "querySelector", "getBoundingClientRect", "width", "flush", "useRender", "convertToUnit", "size", "elevation", "rounded", "opposite"]
}
